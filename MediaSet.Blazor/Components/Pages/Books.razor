@page "/books"
@using MediaSet.Blazor.Models;
@inject IConfiguration Config
@inject HttpClient Http

<PageTitle>Books</PageTitle>

<div class="flex flex-col">
  <div class="pb-4">
    @* border-b border-slate-400"> *@
    <h2 class="text-2xl">Books</h2>
  </div>
  <div class="h-full mt-4">
    <table class="table-auto border-spacing-x-2">
      <thead>
        <th class="text-left underline">Title</th>
        <th class="text-left underline">Subtitle</th>
        <th class="text-left underline">Authors</th>
        <th class="text-left underline">Pages</th>
        <th></th>
      </thead>
      <tbody>
      @foreach (var book in BooksData)
      {
        <tr>
          <td>@book.Title</td>
          <td>@book.Subtitle</td>
          <td>@string.Join(',', book.Author)</td>
          <td>@book.Pages</td>
          <td class="flex flex-row gap-2">
            <NavLink href="/books/{book.Id}">Edit</NavLink>
            <NavLink>Delete</NavLink>
          </td>
        </tr>
      }
      </tbody>
    </table>
  </div>
</div>

@code {
  private IList<Book> BooksData = [];
  private string apiEndpoint = string.Empty;

  protected override async Task OnInitializedAsync()
  {
    apiEndpoint = $"{Config.GetValue<string>("MediaSetApi")}";
    await GetBooks();
    @* persistingSubscription = ApplicationState.RegisterOnPersisting(PersistData); *@

    @* if (!ApplicationState.TryTakeFromJson<TodoItem[]>(nameof(todoItems), out var restoredData))
    {
      await GetTodoItems();
    }
    else
    {
      todoItems = restoredData!;
    } *@
  }

  private async Task GetBooks()
  {
    var requestUri = $"{apiEndpoint}/books";
    BooksData = await Http.GetFromJsonAsync<Book[]>(requestUri) ?? [];
  }
}
