@page "/books/{id:nonfile}"
@rendermode @(new InteractiveServerRenderMode(prerender:false))
@inject IConfiguration Config
@inject HttpClient HttpClient

<div class="flex flex-col gap-2">
  <div class="flex flex-col gap-2 items-normal sm:flex-row sm:gap-0 sm:items-center justify-between">
    <MediaHeader>Book Detail</MediaHeader>
    <div class="flex gap-4">
      <Anchor href="@($"/books/{Book?.Id}/edit")">Edit</Anchor>
      <Anchor>Delete</Anchor>
    </div>
  </div>
  @if (Book is null)
  {
    <div>No book found for this id, redirecting to Books.</div>
  }
  else
  {
    <div class="mt-4 flex flex-col gap-2">
      <MediaField Label="@nameof(Book.Title)">@Book.Title</MediaField>
      <MediaField Label="@nameof(Book.Subtitle)">@Book.Subtitle</MediaField>
      <MediaField Label="@nameof(Book.Format)">@Book.Format</MediaField>
      <MediaField Label="@nameof(Book.Pages)">@Book.Pages</MediaField>
      <MediaField Label="@nameof(Book.PublicationDate)">@Book.PublicationDate</MediaField>
      <MediaField Label="@nameof(Book.Author)">@(string.Join(',', Book.Author))</MediaField>
      <MediaField Label="@nameof(Book.Publisher)">@(string.Join(',', Book.Publisher))</MediaField>
      <MediaField Label="@nameof(Book.Genre)">@(string.Join(',', Book.Genre))</MediaField>
      <MediaField Label="@nameof(Book.ISBN)">@(string.Join(',', Book.ISBN))</MediaField>
      <MediaField Label="@nameof(Book.Plot)">@Book.Plot</MediaField>
    </div>
  }
</div>


@code {
  [Parameter]
  public string Id { get; set; } = string.Empty;

  private Book? Book { get; set; }

  protected override async Task OnInitializedAsync()
  {
    var apiEndpoint = $"{Config.GetValue<string>("MediaSetApi")}";
    var requestUri = $"{apiEndpoint}/books/{Id}";
    Book = await HttpClient.GetFromJsonAsync<Book>(requestUri);
  }
}
