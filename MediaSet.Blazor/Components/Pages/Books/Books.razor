@page "/books"
@* @rendermode @(new InteractiveServerRenderMode(prerender:false)) *@
@rendermode InteractiveServer
@inject IConfiguration Config
@inject HttpClient HttpClient
@inject NavigationManager Navigation

<PageTitle>Books</PageTitle>

<div class="flex flex-col">
  <div class="flex flex-row items-center justify-between">
    <div class="flex flex-row gap-4 items-end">
      <MediaHeader>Books</MediaHeader>
      @if (booksData.Count > 0)
      {
        <div class="text-lg">Total Books: @booksData.Count</div>
      }
    </div>
    <div class="flex flex-row gap-2">
      <Anchor class="self-center mr-4" href="/books/add">Add</Anchor>
      <input @bind="searchInput" class="p-1 pl-2 dark:text-slate-800" placeholder="Search for book(s)" aria-placeholder="Search for book(s)" />
      <Button @onclick="SearchBooks">Search</Button>
    </div>
  </div>
  <div class="h-full mt-4">
    @if (isLoading)
    {
      <div>Loading books, just a second....</div>
    }
    else
    {
      @if (booksData.Count > 0)
      {
        <table class="text-left w-full">
          <thead class="dark:bg-zinc-700 border-y-2 border-slate-500">
            <th class="pl-2 p-1 border-r border-slate-800 underline">
              <Anchor href=@GetTitleSortHref()>
                Title (@(OrderBy?.Equals("title:asc") == true ? "asc" : "desc"))
              </Anchor>
            </th>
            <th class="pl-2 p-1 border-r border-slate-800 underline">Subtitle</th>
            <th class="pl-2 p-1 border-r border-slate-800 underline">Format</th>
            <th class="pl-2 p-1 border-r border-slate-800 underline">Authors</th>
            <th class="pl-2 p-1 border-r border-slate-800 underline w-28">
              <Anchor href=@GetPagesSortHref()>
                Pages (@(OrderBy?.Equals("pages:asc") == true ? "asc" : "desc"))
              </Anchor>
            </th>
            <th></th>
          </thead>
          <tbody>
          @foreach (var book in booksData)
          {
            <tr class="border-b border-slate-700 dark:hover:bg-zinc-800">
              <td class="pl-2 p-1 border-r border-slate-800">
                <Anchor href="@($"/books/{book.Id}")">@book.Title</Anchor>
              </td>
              <td class="pl-2 p-1 border-r border-slate-800">@book.Subtitle</td>
              <td class="pl-2 p-1 border-r border-slate-800">@book.Format</td>
              <td class="pl-2 p-1 border-r border-slate-800">@string.Join(',', book.Author)</td>
              <td class="pl-2 p-1 border-r border-slate-800">@book.Pages</td>
              <td class="flex flex-row gap-2 p-1">
                <Anchor href="@($"/books/{book.Id}/edit")">Edit</Anchor>
                <Button ButtonStyle="ButtonStyle.Link" @onclick="(() => ConfirmDelete(book))">Delete</Button>
              </td>
            </tr>
          }
          </tbody>
        </table>
      }
      else if (!isLoading)
      {
        if (string.IsNullOrWhiteSpace(SearchText))
        {
          <div class="text-xl">It appears that you don't have any books.</div>
        }
        else
        {
          <div class="text-xl">No books were found for the search term "@SearchText".</div>
        }
      }
    }
  </div>
</div>

<Dialog Opened="displayDeleteDialog" Title="Confirm deletion">
  <BodyContent>
    Are you sure you want to delete "@(bookToDelete?.Title)@(string.IsNullOrWhiteSpace(bookToDelete?.Subtitle) == false ? $": {bookToDelete?.Subtitle}" : "")"?
  </BodyContent>
  <FooterContent>
    <Button ButtonStyle="ButtonStyle.Secondary" @onclick="(() => displayDeleteDialog = false)">Cancel</Button>
    <Button @onclick="DeleteBook">Delete</Button>
  </FooterContent>
</Dialog>

@code {
  [SupplyParameterFromQuery(Name = "searchText")]
  public string? SearchText { get; set; }

  [SupplyParameterFromQuery(Name = "orderBy")]
  public string? OrderBy { get; set; } = "title:asc";

  private IList<Book> booksData = [];
  private string apiEndpoint = string.Empty;
  private string? searchInput;
  private bool isLoading = true;
  private Book? bookToDelete = null;
  private bool displayDeleteDialog = false;

  protected override async Task OnInitializedAsync()
  {
    apiEndpoint = $"{Config.GetValue<string>("MediaSetApi")}";
    searchInput = SearchText;
    if (string.IsNullOrWhiteSpace(OrderBy))
    {
      OrderBy = "title:asc";
    }
    await GetBooks();
  }

  protected override async Task OnParametersSetAsync()
  {
    await GetBooks();
  }

  private async Task GetBooks()
  {
    isLoading = true;
    Console.WriteLine("{0} Searching books by: '{1}', ordered by {2}", DateTime.Now.ToShortTimeString(), SearchText, OrderBy);
    var requestUri = $"{apiEndpoint}/books/search?searchText={SearchText}&orderBy={OrderBy}";
    booksData = await HttpClient.GetFromJsonAsync<Book[]>(requestUri) ?? [];
    isLoading = false;
  }
  
  private string GetTitleSortHref() => GetSortHref("title");

  private string GetPagesSortHref() => GetSortHref("pages");

  private string GetSortHref(string property)
  {
    string orderByArgs = OrderBy?.Equals($"{property}:asc", StringComparison.OrdinalIgnoreCase) == true ? $"{property}:desc" : $"{property}:asc";
    return Navigation.GetUriWithQueryParameter("orderBy", orderByArgs);
  }

  private void SearchBooks()
  {
    string newUrl = Navigation.GetUriWithQueryParameter("searchText", searchInput);
    Navigation.NavigateTo(newUrl);
  }

  private void OrderData()
  {
    string orderByArgs = OrderBy?.Contains("asc") == true ? "title:desc" : "title:asc";
    string newUrl = Navigation.GetUriWithQueryParameter(nameof(OrderBy), orderByArgs);
    Navigation.NavigateTo(newUrl);
  }

  private void ConfirmDelete(Book book)
  {
    displayDeleteDialog = true;
    bookToDelete = book;
  }

  private async Task DeleteBook()
  {
    if (bookToDelete is not null)
    {
      Console.WriteLine("deleting book -- {0}", bookToDelete);
      var requestUri = $"{apiEndpoint}/books/{bookToDelete.Id}";
      var response = await HttpClient.DeleteAsync(requestUri);
      if (response.IsSuccessStatusCode)
      {
        displayDeleteDialog = false;
        bookToDelete = null;
        await GetBooks();
      }
      else
      {
        Console.WriteLine("Failed to delete a book for some reason");
      }
    }
  }
}
