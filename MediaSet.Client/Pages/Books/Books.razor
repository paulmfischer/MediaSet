@page "/books"
@inject HttpClient Http

<h3>Books</h3>
<NavLink class="nav-link" href="books/add"><span class="oi oi-plus" aria-hidden="true"></span> Add Book</NavLink>

@if (AllBooks.Count() == 0 && Loaded)
{
    <p>
        There are no books!
        <NavLink class="nav-link" href="books/add">Add a Book to get started!</NavLink>
    </p>
}
else if (Loaded)
{
    <div class="table-responsive">
        <table class="table table-striped table-bordered table-sm">
            <caption>List of books</caption>
            <thead class="thead-dark">
                <tr>
                    <th>Title</th>
                    <th>ISBN</th>
                    <th>Sub Title</th>
                    <th>Number of Pages</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var book in AllBooks)
                {
                    <tr>
                        <td>@book.Title</td>
                        <td>@book.ISBN</td>
                        <td>@book.SubTitle</td>
                        <td>@book.NumberOfPages</td>
                        <td class="actions">
                            <a class="btn btn-outline-primary" href="books/@book.Id">Detail</a>
                            <a class="btn btn-outline-secondary" href="books/edit/@book.Id">Edit</a>
                            <button class="btn btn-outline-danger" @onclick="@(e => DisplayConfirmDialog(book.Id))">Delete</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
    <Confirm @ref="confirmDialog" Title="Delete book?" Message="Are you sure you want to delete this book?" OnConfirm="@HandleConfirm" />
}
else
{
    <p>Loading books....</p>
}

@code {
    private IList<BookViewModel> AllBooks = new List<BookViewModel>();
    private bool Loaded = false;
    private int BookIdToDelete;
    private Confirm confirmDialog;

    protected override async Task OnInitAsync()
    {
        AllBooks = await LoadBooks();
        Loaded = true;
    }

    protected Task<IList<BookViewModel>> LoadBooks()
    {
        return Http.GetJsonAsync<IList<BookViewModel>>("api/book/list");
    }

    protected async Task HandleConfirm(bool performOperation)
    {
        if (performOperation)
        {
            await Http.DeleteAsync("api/book/delete/" + BookIdToDelete);
            AllBooks = await LoadBooks();
            Loaded = true;
        }

        confirmDialog.Hide();
    }

    protected void DisplayConfirmDialog(int bookId)
    {
        BookIdToDelete = bookId;
        confirmDialog.Show();
    }
}
