@page "/books/edit/{BookId:int}"
@inject HttpClient Http
@inject IUriHelper UriHelper

<h3>Edit Book</h3>
<NavLink class="nav-link" href="books">
    <span class="oi oi-book" aria-hidden="true"></span> Books
</NavLink>

@if (Loading)
{
    <div class="d-flex justify-content-center">
        <Loading />
    </div>
}
else
{
    <EditForm Model="@bookViewModel" OnValidSubmit="@HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <input @bind="@bookViewModel.Id" type="hidden" />
        <input @bind="@bookViewModel.MediaId" type="hidden" />
        <input @bind="@bookViewModel.MediaTypeId" type="hidden" />
        <div class="form-group">
            <label for="title">Title:</label>
            <InputText id="title" Class="form-control" @bind-Value="@bookViewModel.Title" />
        </div>

        <div class="form-group">
            <label for="isb">ISBN:</label>
            <InputText id="isbn" Class="form-control" @bind-Value="@bookViewModel.ISBN" />
        </div>

        <div class="form-group">
            <label for="subTitle">Sub Title:</label>
            <InputText id="subTitle" Class="form-control" @bind-Value="@bookViewModel.SubTitle" />
        </div>

        <div class="form-group">
            <label for="numberOfPages">Number of Pages:</label>
            <InputNumber id="numberOfPages" Class="form-control" @bind-Value="@bookViewModel.NumberOfPages" />
        </div>

        <div class="form-group">
            <Autocomplete Collection="bookViewModel.Publishers" Title="Publisher:" AddNewLabel="Add new publisher: " Value="bookViewModel.Publisher" OnItemSelected="@((PublisherViewModel selectedItem) => PublisherSelected(selectedItem))" OnAddNewItem="@AddNewItem">
                <ItemTemplate Context="Publisher">@Publisher.Id---@Publisher.Name</ItemTemplate>
            </Autocomplete>
         </div>

        @if (!Saving)
        {
            <button class="btn btn-primary" type="submit">Submit</button>
        }
        else
        {
            <button class="btn btn-primary" type="button" disabled><Loading Message="Saving..." InButton="true" />Saving...</button>
        }
    </EditForm>
}

@code {
    [Parameter]
    private int BookId { get; set; }

    private EditBookViewModel bookViewModel = new EditBookViewModel();
    private bool Saving = false;
    private bool Loading = true;

    protected async void HandleValidSubmit()
    {
        Saving = true;
        await Http.SendJsonAsync(HttpMethod.Post, "api/book/update", bookViewModel);
        UriHelper.NavigateTo("/books");
    }

    protected override async Task OnInitAsync()
    {
        bookViewModel = await Http.GetJsonAsync<EditBookViewModel>("api/book/detail/" + BookId);
        Loading = false;
        bookViewModel.Publishers = await Http.GetJsonAsync<IEnumerable<PublisherViewModel>>("api/metadata/publishers");
    }

    private void PublisherSelected(PublisherViewModel item)
    {
        bookViewModel.PublisherId = item.Id;
    }

    private void AddNewItem(string newValue)
    {
        bookViewModel.Publisher = new PublisherViewModel { Name = newValue };
    }
}
