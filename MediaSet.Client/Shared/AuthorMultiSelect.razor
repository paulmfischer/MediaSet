@inject HttpClient Http

<div class="multiselect">
    <ul class="list-group list-group-horizontal">
        @foreach (var author in SelectedAuthors)
        {
            <li class="list-group-item d-flex justify-content-between align-items-center">
                @author.Name
                <button type="button" class="btn btn-secondary btn-sm"><span class="oi oi-x" aria-hidden="true"></span></button>
            </li>
        }
    </ul>
    <Autocomplete @ref="autocomplete" Collection="Authors" Title="Author:" AddNewLabel="Add new author: " OnItemSelected="@((AuthorViewModel selectedItem) => AuthorSelected(selectedItem))" OnAddNewItem="@AddNewAuthor">
        <ItemTemplate Context="Auth">@Auth.Name</ItemTemplate>
    </Autocomplete>
</div>

@code {
    [Parameter]
    private IList<AuthorViewModel> SelectedAuthors { get; set; } = new List<AuthorViewModel>();

    [Parameter]
    private EventCallback<AuthorViewModel> OnAuthorAdded { get; set; }

    private IEnumerable<AuthorViewModel> Authors { get; set; }
    private Autocomplete<AuthorViewModel> autocomplete { get; set; }

    protected override async Task OnInitAsync()
    {
        Authors = await Http.GetJsonAsync<IEnumerable<AuthorViewModel>>("api/metadata/authors");
    }

    protected async void AuthorSelected(AuthorViewModel author)
    {
        SelectedAuthors.Add(author);
        autocomplete.SearchValue = string.Empty;
        await OnAuthorAdded.InvokeAsync(author);
        Console.WriteLine("author added {0} - {1}", author.Name, SelectedAuthors.Count());
        base.StateHasChanged();
    }

    protected void AddNewAuthor(string AuthorName)
    {
        AuthorSelected(new AuthorViewModel { Name = AuthorName });
    }
}
