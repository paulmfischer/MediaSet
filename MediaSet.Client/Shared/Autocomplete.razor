@typeparam TItem

<div class="autocomplete">
    <label for="search">@Title</label>
    <InputText id="Search" Class="form-control" @bind-Value="@SearchValue" @oninput="@FilterResults" @onfocus="@Focused" @onblur="@LostFocus" />
    @if (DisplayResults)
    {
        <ul class="list-group">
            @foreach (var item in FilteredCollection(SearchValue))
            {
                <li class="list-group-item">@ItemTemplate(item.Item)</li>
            }
        </ul>
    }
</div>

@code {
    [Parameter]
    private string Title { get; set; } = "Search:";

    [Parameter]
    RenderFragment<TItem> ItemTemplate { get; set; }

    [Parameter]
    private IEnumerable<TItem> Collection { get; set; }

    private string SearchValue { get; set; }
    private bool DisplayResults { get; set; } = false;

    private void FilterResults(UIChangeEventArgs ev)
    {
        SearchValue = (string)ev.Value;
    }

    private void Focused()
    {
        DisplayResults = true;
    }

    private void LostFocus()
    {
        DisplayResults = false;
    }

    protected IEnumerable<SelectItem> FilteredCollection(string searchVal)
    {
        return Collection.Select(x => new SelectItem {
            Id = (int)x.GetType().GetProperty("Id")?.GetValue(x, null),
            Name = (string)x.GetType().GetProperty("Name")?.GetValue(x, null),
            Item = x
        }).Where(x => string.IsNullOrEmpty(searchVal) || x.Name.Contains(searchVal));
    }

    protected class SelectItem
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public TItem Item { get; set; }
    }
}
