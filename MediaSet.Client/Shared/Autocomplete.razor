@typeparam TItem

<div class="autocomplete" @onblur="@LostFocus">
    <label for="search">@Title</label>
    <InputText id="Search" Class="form-control" @bind-Value="@SearchValue" @oninput="@FilterResults" @onfocus="@Focused" />
    @if (DisplayResults)
    {
        <div class="list-group">
            @foreach (var item in FilteredCollection(SearchValue))
            {
                <button type="button" class="list-group-item list-group-item-action @IsAMatch(item)" @onclick="@(async (e) => await SetSelectedItem(item))">@ItemTemplate(item.Item)</button>
            }
            @if (!string.IsNullOrEmpty(SearchValue) && SearchValueDoesNotMatch())
            {
                <button type="button" class="list-group-item list-group-item-action" @onclick="@SetNewItem">@AddNewLabel@SearchValue</button>
            }
        </div>
    }
</div>

@code {
    [Parameter]
    private string Title { get; set; } = "Search:";

    [Parameter]
    private string AddNewLabel { get; set; } = "Add: ";

    [Parameter]
    private TItem Value { get; set; }

    [Parameter]
    RenderFragment<TItem> ItemTemplate { get; set; }

    [Parameter]
    private IEnumerable<TItem> Collection { get; set; }

    [Parameter]
    private EventCallback<TItem> OnItemSelected { get; set; }

    [Parameter]
    private EventCallback<string> OnAddNewItem { get; set; }

    private string SearchValue { get; set; }
    private bool DisplayResults { get; set; } = false;
    private SelectItem NewItem { get; set; }

    protected override void OnInit()
    {
        if (Value != null)
        {
            SearchValue = (string)Value.GetType().GetProperty("Name")?.GetValue(Value, null);
        }
    }

    private void FilterResults(UIChangeEventArgs ev)
    {
        SearchValue = (string)ev.Value;
        NewItem = new SelectItem
        {
            Name = string.Format("Add: {0}", SearchValue)
        };
    }

    private bool SearchValueDoesNotMatch()
    {
        return !Collection.Any(x => ((string)x.GetType().GetProperty("Name")?.GetValue(x, null)).Equals(SearchValue));
    }

    private string IsAMatch(SelectItem item)
    {
        if (Value != null)
        {
            return item.Name.Equals((string)Value.GetType().GetProperty("Name")?.GetValue(Value, null)) ? "active" : string.Empty;
        }

        return string.Empty;
    }

    private void Focused()
    {
        DisplayResults = true;
    }

    private void LostFocus()
    {
        DisplayResults = false;
    }

    private IEnumerable<SelectItem> FilteredCollection(string searchVal)
    {
        return Collection.Select(x => new SelectItem {
            Id = (int)x.GetType().GetProperty("Id")?.GetValue(x, null),
            Name = (string)x.GetType().GetProperty("Name")?.GetValue(x, null),
            Item = x
        }).Where(x => string.IsNullOrEmpty(searchVal) || x.Name.Contains(searchVal));
    }

    private async Task SetNewItem()
    {
        await OnAddNewItem.InvokeAsync(SearchValue);
        DisplayResults = false;
        base.StateHasChanged();
    }

    private async Task SetSelectedItem(SelectItem itemSelected)
    {
        SearchValue = itemSelected.Name;
        Value = itemSelected.Item;
        DisplayResults = false;
        await OnItemSelected.InvokeAsync(itemSelected.Item);
        base.StateHasChanged();
    }

    private class SelectItem
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public TItem Item { get; set; }
    }
}
